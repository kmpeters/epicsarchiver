#!/usr/bin/env python
#
# main pvarch application

import sys, os, time, warnings
import getopt
try:
    import EpicsArchiver
except:
    print 'cannot import EpicsArchiver'
    sys.exit(1)


def show_usage():
    print """    pvarch:   run and interact with Epics PV Archiver and MySQL process
    
    pvarch -h            shows this message.
    pvarch status        shows cache status, some recent statistics.
    pvarch check         returns # of variables updated in past minute. Should be >1!
    pvarch restart       restarts the caching process
    pvarch add_pv        add a PV to the currently running cache
    pvarch drop_pv       add a PV to the currently running cache

    pvarch add_pvfile    read a file of PVs to add to the Archiver

    pvarch cache start        start cache process (if it's not already running)
           cache stop         stop  cache process
           cache restart      restart cache process
           cache status   t   show # of PVs cached in past t seconds (default=60)
           cache activity t   show list of PVs cached in past t seconds (default=60)

    """
    sys.exit()


def next_archive():
    master  = EpicsArchiver.ArchiveMaster()
    dbname  = master.get_currentDB()

    next_db = master.make_nextdb()
    master.request_stop()
    master.set_pid(0)
    master.set_currentDB(next_db)
    master.set_runinfo(dbname)
    master.close()

    time.sleep(1.0)
    run_archive(action='start')


def run_archive(action='start'):
    def archive_loop():
        a  = EpicsArchiver.Archiver()
        a.mainloop()


    config  = EpicsArchiver.config
    master  = EpicsArchiver.ArchiveMaster()
    dbname  = master.get_currentDB()
    dir     = config.logdir
    if not os.path.exists(dir):   os.mkdir(dir)
    sout    = os.path.join(dir, "%s.log" % dbname)
    serr    = os.path.join(dir, "%s.err" % dbname)
    pidfile = os.path.join(dir, "pvarch.pid")
    master.close()
    
    EpicsArchiver.startstop(stdout =sout,stderr=serr, pidfile=pidfile,
                            process_name='pvarch', action=action)
    archive_loop()

def run_cache(action=None):

    def cache_loop():
        cache   = EpicsArchiver.Cache()
        cache.mainloop()
        
    config  = EpicsArchiver.config
    dir     = config.logdir
    if not os.path.exists(dir):   os.mkdir(dir)
    sout    = os.path.join(dir, "cache.log")
    serr    = os.path.join(dir, "cache.err")
    pidfile = os.path.join(dir, "cache.pid")
    

    EpicsArchiver.startstop(stdout =sout,stderr=serr, pidfile=pidfile,
                            process_name='pvcache', action=action)
    cache_loop()

def read_pid(name='cache'):
    config = EpicsArchiver.config
    pidfile = "%s/%s.pid" % (config.logdir,name)
    try:
        pf  = file(pidfile,'r')
        pid = int(pf.read().strip())
        pf.close()
    except IOError:
        pid = None
    return pid
    
def cache_status(action='activity', dt=60):
    pid   = read_pid(name='cache')

    cache = EpicsArchiver.Cache()
    ret   = cache.get_recent(dt=dt)
    status= 'running'
    if pid != cache.get_pid(): status = 'not running!'
        
    msg = '%i changed PVs cached in past %i seconds.  PID=%i  Status=%s'
    if 'activity' == action:
        for r in ret:
            stime = time.strftime("%H:%M:%S", time.localtime(r['ts']))
            print "  %s   %.29s = %s" % (stime, r['name']+' '*20,r['value'])
    print msg % (len(ret), int(dt), cache.get_pid(), status)    
    cache.close()
    
def archive_status(minutes=10):
    master  = EpicsArchiver.ArchiveMaster()
    stat = master.status_report(minutes=minutes)
    master.close()
    return stat
    
        
def drop_pv(pvname):
    master  = EpicsArchiver.ArchiveMaster()
    dbname  = master.get_currentDB()
    arch    = EpicsArchiver.Archiver(dbname=dbname,master=master)    
    cache   = EpicsArchiver.Cache()
    cache.drop_pv(pvname)
    arch.drop_pv(pvname)
    master.close()
    arch.close()
    cache.close()
    
def main():
    opts, rawargs = getopt.getopt(sys.argv[1:], "h", ["help"])
    try:
        cmd = rawargs.pop(0)
    except IndexError:
        cmd = 'help'
    for (k,v) in opts:
        if k in ("-h", "--help"): cmd = 'help'

    args = []
    for arg in rawargs:
        if ',' in arg:
            for i in arg.split(','):
                args.append(i.strip())
        else:
            args.append(arg)
            
    if   'help' == cmd:
        show_usage()

    elif 'status' == cmd:
        if read_pid(name='cache') is None:
            print "Cache is not running: start Cache with 'pvarch cache start'!"
        else:
            print 'Cache is running'

        if read_pid(name='pvarch') is None:
            print "Archiver is not running: start with 'pvarch start'"
        else:
            for i in archive_status(): print i
                
    elif 'check' == cmd:
        print archive_status()[1].split()[0]
                
    elif cmd in ('start','stop','restart'):
        run_archive(action=cmd)
            
    elif 'next' == cmd:
        next_archive()
        
    elif 'add_pv' == cmd:
        for pv in args:
            EpicsArchiver.add_pv_to_cache(pv)

    elif 'add_pvfile' == cmd:
        for pvfile in args:
            EpicsArchiver.add_pvfile(pvfile)

    elif 'drop_pv' == cmd:
        for pv in args:
            drop_pv(pv)

    elif 'cache' == cmd:
        action = args.pop(0)

        if action not in ('start','stop','restart','status','activity'):
            print "'pvarch cache' needs one of start, stop, restart, status, activity"
            print "    Try 'pvarch -h' "
            
        if action in ('status','activity'):
            dt = 60
            if len(args)>0: dt = args.pop(0)
            cache_status(action=action,dt=float(dt))
        else:
            run_cache(action=action)
           

    else: print "pvarch  unknown command '%s'.    Try 'pvarch -h'" % cmd

main()
