#!/usr/bin/env python
#
# main pvarch application

import sys, os, time, getopt

try:
    import EpicsArchiver
except:
    print 'cannot import EpicsArchiver'
    sys.exit(1)

from EpicsArchiver import MasterDB, Cache, ArchiveMaster, Archiver, \
     tformat, add_pvfile, startstop

from EpicsArchiver.config import logdir, master_db

def show_usage():
    print """    pvarch:   run and interact with Epics PV Archiver and MySQL process
    
    pvarch -h            shows this message.
    pvarch status        shows cache and archiving status, some recent statistics.
    pvarch check         print # of archivedsin past 10 minutes. Should be >1!

    pvarch start         start the archiving process
    pvarch stop          stop the archiving process
    pvarch restart       restart the archiving process
    pvarch next          restart with 'next run' of data archives

    pvarch add_pv        add a PV to the cache and archive
    pvarch add_pvfile    read a file of PVs to add to the Archiver

    pvarch drop_pv       remove a PV from cahce and archive

    pvarch list          prints a list of recent data archives
    pvarch save          save a list of recent data archives

    pvarch cache start        start cache process (if it's not already running)
           cache stop         stop  cache process
           cache restart      restart cache process
           cache status   t   show # of PVs cached in past t seconds (default=60)
           cache activity t   show list of PVs cached in past t seconds (default=60)
    """
    sys.exit()


def next_archive():
    master  = ArchiveMaster()
    dbname  = master.arch_db
    next_db = master.make_nextdb()

    master.stop_archiver()
    master.set_currentDB(next_db)
    master.set_runinfo(dbname)
    time.sleep(1.0)
    master.close()
    run_archive(action='start')

def save_archives(args):
    " save archives to gzipped ascii files" 
    m  = MasterDB()
    for db in (m.arch_db, master_db):
        m.save_db(dbname=db)
        if db in args: args.remove(db)
        
    for db in args:
        m.save_db(dbname=db)
    m.close()

def list_archives():
    master  = MasterDB()
    for i in master.runs_report():
        print i
    master.close()

def run_archive(action='start'):
    def archive_loop():
        Archiver().mainloop()

    master  = MasterDB()
    dbname  = master.arch_db

    dir     = logdir
    if not os.path.exists(dir):   os.mkdir(dir)
    sout    = os.path.join(dir, "%s.log" % dbname)
    serr    = os.path.join(dir, "%s.err" % dbname)
    pidfile = os.path.join(dir, "pvarch.pid")

    if 'stop'==action:
        print 'Stopping ....'
        master.set_arch_status('stopping')
        master.set_arch_pid(0)
        time.sleep(1.0)
    master.close()
    
    startstop(stdout =sout,stderr=serr, pidfile=pidfile,
              process_name='pvarch', action=action,
              func = archive_loop)

def run_cache(action=None):

    def cache_loop():
        Cache().mainloop()
        
    dir     = logdir
    if not os.path.exists(dir):   os.mkdir(dir)
    sout    = os.path.join(dir, "cache.log")
    serr    = os.path.join(dir, "cache.err")
    pidfile = os.path.join(dir, "cache.pid")

    if 'stop'==action:
        c = MasterDB()
        c.set_cache_status('stopping')
        c.set_cache_pid(0)
        time.sleep(1.0)        
        c.close()

    startstop(stdout =sout,stderr=serr, pidfile=pidfile,
              process_name='pvcache', action=action,
              func = cache_loop)

def read_pid(name='cache'):
    pidfile = "%s/%s.pid" % (logdir,name)
    try:
        pf  = file(pidfile,'r')
        pid = int(pf.read().strip())
        pf.close()
    except IOError:
        pid = None
    return pid
    
def cache_status(action='activity', dt=60):
    pid   = read_pid(name='cache')
    cache = Cache()
    ret   = cache.get_recent(dt=dt)
    status= 'running'
    if pid != cache.get_pid(): status = 'not running!'
    pid = cache.get_pid()
    cache.close()        
    msg = '%i changed PVs cached in past %i seconds.  PID=%i  Status=%s'
    if 'check' == action:            
        print len(ret)
    else:
        if 'activity' == action:
            for r in ret:
                stime = tformat(r['ts'],format="%H:%M:%S")
                print "  %s   %.29s = %s" % (stime, r['pvname']+' '*20,r['value'])
        print msg % (len(ret), int(dt), pid, status)

    
def archive_status(minutes=10):
    m    = MasterDB()
    stat = m.arch_report(minutes=minutes)
    m.close()
    return stat
        
def drop_pv(pvname):
    Archiver().drop_pv(pvname)
    MasterDB().drop_pv(pvname)
    
def main():
    opts, rawargs = getopt.getopt(sys.argv[1:], "h", ["help"])
    try:
        cmd = rawargs.pop(0)
    except IndexError:
        cmd = 'help'
    for (k,v) in opts:
        if k in ("-h", "--help"): cmd = 'help'

    args = []
    for arg in rawargs:
        if ',' in arg:
            for i in arg.split(','):
                if len(i)>0:  args.append(i.strip())
        elif len(arg)>0:
            args.append(arg)
            
    if   'help' == cmd:
        show_usage()

    elif 'status' == cmd:
        if read_pid(name='cache') is None:
            print "Cache is not running: start Cache with 'pvarch cache start'!"
        else:
            print 'Cache is running'

        if read_pid(name='pvarch') is None:
            print "Archiver is not running: start with 'pvarch start'"
        else:
            for i in archive_status(): print i
                
    elif 'check' == cmd:
        print archive_status()[1].split()[0]
                
    elif cmd in ('start','stop','restart'):
        run_archive(action=cmd)
            
    elif 'next' == cmd:
        next_archive()

    elif 'save' == cmd:
        save_archives(args)

    elif 'list' == cmd:
        list_archives()
        
    elif 'add_pv' == cmd:
        c    = Cache()
        for pv in args:
            c.add_pv(pv)
        if len(args)>1:
            c.set_allpairs(args)
        c.close()

    elif 'add_pvfile' == cmd:
        for pvfile in args:
            add_pvfile(pvfile)

    elif 'drop_pv' == cmd:
        for pv in args:
            drop_pv(pv)

    elif 'cache' == cmd:
        action = args.pop(0)

        if action not in ('start','stop','restart','status','activity','check'):
            print "'pvarch cache' needs one of start, stop, restart, status, check, activity"
            print "    Try 'pvarch -h' "
            
        if action in ('status','check','activity'):
            dt = 60
            if len(args)>0: dt = args.pop(0)
            cache_status(action=action,dt=float(dt))
        else:
            run_cache(action=action)

    else: print "pvarch  unknown command '%s'.    Try 'pvarch -h'" % cmd

main()
