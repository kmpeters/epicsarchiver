#!/usr/bin/env python
#
# creates initial MySQL databases for EpicsArchiver

import os
import sys
import time
import getpass
import warnings

try:
    from EpicsArchiver import util, SimpleDB
except ImportError:
    xx, yy, zz = sys.exc_info()
    sys.excepthook(xx,yy,zz)
    print "==\n==  EpicsArchiver cannot run! \n=="
    sys.exit(1)

try:
    from EpicsArchiver import config
except ImportError:
    xx, yy, zz = sys.exc_info()
    sys.excepthook(xx,yy,zz)
    print "==\n==  EpicsArchiver cannot read configuration file (config.py)! \n=="
    sys.exit(1)

welcome_msg = """
 **************************************************************
 Initializing the MySQL database tables for the EpicsArchiver 

 The EpicsArchiver will use mysql host, username, and password:
    host = %(dbhost)s
    user = %(dbuser)s
    pass = %(dbpass)s

 You are about to be prompted for a username / password        
 of a mysql account that can grant permissions to %(dbuser)s 

 *** Warning *** Warning *** Warning *** Warning *** Warning *** 
 This will destroy the databases %(masterdb)s and %(cachedb)s

 Use Ctrl-C now if you do not want these databases destroyed!
 **************************************************************
"""

master= ("drop table if exists current",
         "drop table if exists pairs",
         "drop table if exists runs",
         """create table pairs (
          pv1 varchar(64) not null,
          pv2 varchar(64) not null,  score int(10) unsigned default null)""", 

         """create table runs (
         id smallint(5) unsigned not null auto_increment,
         db varchar(32) not null default '',
         notes varchar(255) default null,
         start_time int(11) not null default '0',
         stop_time int(11) not null default '0',
         primary key  (id),
         unique key db (db))""",
         
         """create table current (
         status enum('offline','running','stopping','unknown') default 'unknown',
         db varchar(32) default null,
         pid int(10) unsigned default null)""",
       )

master_current =  "insert into current values ('unknown','%s',0)"
master_run0    =  "insert into runs values (1,'%s','%s',%i,%i)"

cache = ("drop table if exists cache",
         "drop table if exists info",
         "drop table if exists req",

         """create table cache (
  id     int(10) unsigned not null auto_increment,
  name   varchar(64) default null,
  type   varchar(64) default null,
  value  varchar(64) default null,
  cvalue varchar(64) default null,
  ts     double not null,
  primary key  (id))""",

         """create table req (
  id int(10) unsigned not null auto_increment,
  name varchar(64) default null,
  primary key  (id))""",

         """create table info (
  id int(10) unsigned not null auto_increment,
  ts double default null,
  datetime varchar(128) default null,
  pid int(10) unsigned default null,
  primary key  (id))""",

         "insert into info values (1,0.0,'created',0)"
)

def initialize(config):
    print welcome_msg % config.__dict__
    
    warnings.filterwarnings("ignore", "Unknown table.*")

    super_user = getpass.getuser()
    super_pass = None

    try:
        answer = raw_input('mysql username [%s]:' % super_user)
    except KeyboardInterrupt:
        print 'exiting...'
        sys.exit(2)
    if answer is not '':  super_user = answer

    try:
        super_pass  = getpass.getpass('mysql password for %s:' % super_user)
    except KeyboardInterrupt:
        print 'exiting...'
        sys.exit(2)

    try:
        xdb   = SimpleDB(user=super_user, db='mysql',
                         passwd=super_pass, host = config.dbhost)
    except:
        print 'error starting mysql.  Invalid Username/Password?  Is mysql running?'
        sys.exit(1)


    print '\ncreating database %s :' % config.masterdb,
    xdb.create_and_use(config.masterdb) 

    xdb.execute(master) 

    firstrun = config.dbformat % (config.dbprefix,1)
    firstnote = "%s to the indefinite future" % time.ctime()

    print 'granting permissions...',

    xdb.grant(db=config.masterdb, user=config.dbuser,
              passwd=config.dbpass, host=config.dbhost)

    print 'done.\nsetting up first run = %s' % firstrun,
    xdb.execute(master_current % firstrun)
    xdb.execute(master_run0 % (firstrun,firstnote,
                               int(time.time()),int(util.MAX_EPOCH-1)))
    


    print 'done.\ncreating database %s :' % config.cachedb,
    xdb.create_and_use(config.cachedb)
 
    xdb.execute(cache)

    print 'granting permissions...',
    xdb.grant(db=config.cachedb, user=config.dbuser,
              passwd=config.dbpass, host=config.dbhost)

    print 'done.\n\nReady to start EpicsArchiver!'

initialize(config)
